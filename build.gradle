plugins {
    id 'java'
}

group = 'systems.cauldron'
version = '1.0-SNAPSHOT'

sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {

    // deep learning inference
    if (project.hasProperty('gpu')) {
        implementation 'com.microsoft.onnxruntime:onnxruntime_gpu:1+'
    } else {
        implementation 'com.microsoft.onnxruntime:onnxruntime:1+'
    }

    //web server
    implementation enforcedPlatform('io.helidon:helidon-dependencies:2+')
    implementation 'io.helidon.webserver:helidon-webserver'
    implementation 'io.helidon.webserver:helidon-webserver-cors'
    implementation 'io.helidon.media:helidon-media-jsonp'
    implementation 'io.helidon.config:helidon-config-yaml'
    implementation 'io.helidon.health:helidon-health'
    implementation 'io.helidon.health:helidon-health-checks'
    implementation 'io.helidon.metrics:helidon-metrics'
    testImplementation 'io.helidon.webclient:helidon-webclient'

    // unit testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5+'

    // logging
    implementation 'org.apache.logging.log4j:log4j-api:2+'
    implementation 'org.apache.logging.log4j:log4j-core:2+'

    // developer ergonomics
    compileOnly 'org.projectlombok:lombok:1+'
    annotationProcessor 'org.projectlombok:lombok:1+'
    testCompileOnly 'org.projectlombok:lombok:1+'
    testAnnotationProcessor 'org.projectlombok:lombok:1+'

}

test {
    useJUnitPlatform()
}

java {
    modularity.inferModulePath = true
}

compileJava {
    inputs.property('moduleName', 'systems.cauldron.service.superresolution')
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

jar {
    archiveFileName = "app.jar"
    manifest {
        attributes ('Main-Class': 'systems.cauldron.service.superresolution.Server',
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/$it.name" }.join(' ')
        )
    }
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into 'build/libs/libs'
    dependsOn jar
}

assemble {
    dependsOn copyLibs
}